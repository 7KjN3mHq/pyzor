#!/usr/local/bin/python

import sys
import os.path
import pyzor.client
import getopt

__author__   = pyzor.__author__
__version__  = pyzor.__version__
__revision__ = "$Id: pyzor,v 1.7 2002-04-15 23:46:37 ftobin Exp $"

# hard-coded for the moment
digest_spec = pyzor.client.PiecesDigestSpec([(20, 3), (60, 3)])

def usage():
    sys.stderr.write("usage: %s [-d] check|report|discover|ping [cmd_options]\nData is read on standard input.\n"
                     % sys.argv[0])
    sys.exit(1)

def discover(args, config, config_fn):
    config.get_informed(config.default_inform_url, config_fn)
         
def ping(args, client, config):
    print repr(client.ping(config.servers[0]))


def check(args, client, config):
    import rfc822
    fp = rfc822.Message(sys.stdin, seekable=0).fp
        
    digest = pyzor.client.PiecesDigest.compute_from_file(fp,
                                                         digest_spec,
                                                         seekable=0)

    result = client.check(digest, config.servers[0])
    if result[0] == 200:
        print result[1]
        sys.exit(result[1] == 0)
    sys.exit(1)


def report(args, client, config):
    (options, args2) = getopt.getopt(args[1:], '', ['mbox'])
    do_mbox = 0
    for (o, v) in options:
        if o == '--mbox':
            do_mbox = 1

    if do_mbox:
        import mailbox
        mbox = mailbox.PortableUnixMailbox(sys.stdin)
        for msg in mbox:
            report_fp(client, config, msg.fp)
    else:
        import rfc822
        report_fp(client, config, rfc822.Message(sys.stdin).fp)


def report_fp(client, config, fp):
    digest = pyzor.client.PiecesDigest.compute_from_file(fp,
                                                         digest_spec,
                                                         seekable=0)

    print repr(client.report(digest, digest_spec, config.servers[0]))
    

def run():
    debug = 0
    (options, args) = getopt.getopt(sys.argv[1:], 'dh')
    if len(args) < 1:
        usage()

    for (o, v) in options:
        if o == '-d':
            debug = 1
        elif o == '-h':
            usage()
    
    command = args[0]
    
    client = pyzor.client.Client(debug=debug)

    config = pyzor.client.Config()
    config_fn = config.get_default_filename()

    if not os.path.exists(config_fn) or command == 'discover':
        discover(args, config, config_fn)
    config.load(config_fn)

    if len(config.servers) == 0:
        sys.stderr.write("No servers available!  Maybe try the 'discover' command\n")
        sys.exit(1)

    try: 
        if command == 'discover':
            # already completed above
            pass
        elif command == 'check':
            check(args, client, config)
        elif command == 'report':
            report(args, client, config)
        elif command == 'ping':
            ping(args, client, config)
        else:
            usage()
    except pyzor.client.TimeoutError, e:
        sys.stderr.write("timeout from server\n")
        sys.exit(1)

if __name__ == '__main__':
    run()
