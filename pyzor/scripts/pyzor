#!/usr/local/bin/python

import sys
import os.path
import pyzor.client
import getopt

__author__   = pyzor.__author__
__version__  = pyzor.__version__
__revision__ = "$Id: pyzor,v 1.3 2002-04-14 19:52:51 ftobin Exp $"

# hard-coded for the moment
digest_spec = pyzor.client.PiecesDigestSpec([(20, 3), (60, 3)])

def usage():
    sys.stderr.write("usage: %s [-d] check|report|discover|ping\nData is read on standard input.\n"
                     % sys.argv[0])
    sys.exit(1)

def discover(config, config_fn):
    config.get_informed(config.default_inform_url, config_fn)
         
def ping(client, config):
    print repr(client.ping(config.servers[0]))


def check(client, config):
    import rfc822
    fp = rfc822.Message(sys.stdin, seekable=0).fp
        
    digest = pyzor.client.PiecesDigest.compute_from_file(fp,
                                                         digest_spec)
    count = int(client.check(digest, config.servers[0])[1])
    print count
    sys.exit(count == 0)


def report(client, config):
    import mailbox
    mbox = mailbox.PortableUnixMailbox(sys.stdin)

    for msg in mbox:
        digest = pyzor.client.PiecesDigest.compute_from_file(msg.fp,
                                                             digest_spec)
        print repr(client.report(digest, digest_spec, config.servers[0]))


def run():
    debug = 0
    (options, args) = getopt.getopt(sys.argv[1:], 'dh')
    if len(args) != 1:
        usage()

    for (o, v) in options:
        if o == '-d':
            debug = 1
        elif o == '-h':
            usage()
    
    command = args[0]
    
    client = pyzor.client.Client(debug=debug)

    config = pyzor.client.Config()
    config_fn = config.get_default_filename()

    if not os.path.exists(config_fn) or command == 'discover':
        discover(config, config_fn)
    config.load(config_fn)

    if len(config.servers) == 0:
        sys.stderr.write("No servers available!  Maybe try the 'discover' command\n")
        sys.exit(1)

    try: 
        if command == 'discover':
            # already completed above
            pass
        elif command == 'check':
            check(client, config)
        elif command == 'report':
            report(client, config)
        elif command == 'ping':
            ping(client, config)
        else:
            usage()
    except pyzor.client.TimeoutError, e:
        sys.stderr.write("timeout from server\n")

if __name__ == '__main__':
    run()
